import{_ as r,M as i,p as c,q as o,R as n,t as s,N as a,V as p,a1 as l}from"./framework-7db056f4.js";const d={},u=n("h1",{id:"polardb-pg-tpc-c-测试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#polardb-pg-tpc-c-测试","aria-hidden":"true"},"#"),s(" PolarDB PG TPC-C 测试")],-1),m=n("p",null,"在本节中，我们将学习如何对 PolarDB PG 进行 TPCC 测试，本次实践将基于单机本地存储来运行。",-1),v=n("h2",{id:"tpc-c-测试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tpc-c-测试","aria-hidden":"true"},"#"),s(" TPC-C 测试")],-1),b=n("p",null,"TPC-C 是一种衡量 OLTP 性能的基准测试。TPC-C 混合了五种不同类型和复杂程度的并发交易，这五种并发交易又包括了在线执行以及排队延迟执行。TPC-C 数据库由九种类型的表组成，以每分钟交易量（tmpC）来衡量具体性能。",-1),h={href:"https://www.tpc.org/tpcc/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"前期准备",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前期准备","aria-hidden":"true"},"#"),s(" 前期准备")],-1),g=n("h3",{id:"部署-polardb-pg",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#部署-polardb-pg","aria-hidden":"true"},"#"),s(" 部署 PolarDB PG")],-1),_=l(`<h3 id="安装-java-和-ant" tabindex="-1"><a class="header-anchor" href="#安装-java-和-ant" aria-hidden="true">#</a> 安装 Java 和 Ant</h3><p>由于 TPC-C 测试工具 benchmarksql 需要通过 Ant 来编译，所以需要安装 Java 和 Ant。这里安装的 Java 版本为 8.0<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，Ant 版本为 1.9.7<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>安装 Java 和 Ant 的后需要修改环境变量。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 配置环境变量</span>
<span class="token function">vim</span> /etc/profile

<span class="token comment"># 以下是本人机器上的配置，可以参考，路径需要根据自己机器进行调整</span>
<span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.332.b09-1.el7_9.x86_64
<span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre
<span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JRE_HOME</span>/lib/rt.jar:<span class="token variable">\${JAVA_HOME}</span>/lib/dt.jar:<span class="token variable">\${JAVA_HOME}</span>/lib/tools.jar
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JRE_HOME</span>/bin
<span class="token builtin class-name">export</span> JAVA_HOME JRE_HOME CLASSPATH <span class="token environment constant">PATH</span>
<span class="token comment">#ant environment</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">ANT_HOME</span><span class="token operator">=</span>/home/postgres/apache-ant-1.9.16
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$ANT_HOME</span>/bin

<span class="token comment"># 生效</span>
<span class="token builtin class-name">source</span> /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证 Java 和 Ant 安装成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># java</span>
$ <span class="token function">java</span> <span class="token parameter variable">-version</span>
openjdk version <span class="token string">&quot;1.8.0_332&quot;</span>
OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_332-b09<span class="token punctuation">)</span>
OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.332</span>-b09, mixed mode<span class="token punctuation">)</span>

<span class="token comment"># ant</span>
$ ant <span class="token parameter variable">-version</span>
Apache Ant<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> version <span class="token number">1.9</span>.16 compiled on July <span class="token number">10</span> <span class="token number">2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装-benchmarksql" tabindex="-1"><a class="header-anchor" href="#安装-benchmarksql" aria-hidden="true">#</a> 安装 benchmarksql</h3><p>我们将通过 benchmarksql 工具来进行 TPC-C 测试。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>下面链接中的 benchmarksql 采用的是 5.1 版本。相较于 5.0 版本，5.1 版本可以使用 Procedures，性能表现较好。推荐使用 5.1 版本。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载 benchmarksql</span>
<span class="token function">git</span> clone https://github.com/petergeoghegan/benchmarksql

<span class="token comment"># 编译</span>
<span class="token builtin class-name">cd</span> benchmarksql
ant
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进行-tpc-c-测试" tabindex="-1"><a class="header-anchor" href="#进行-tpc-c-测试" aria-hidden="true">#</a> 进行 TPC-C 测试</h2><p>TPC-C 测试主要分为四个步骤：载入数据、预热数据、进行测试、结果分析。下面将分别进行说明。</p><p>通过如下命令进入到指定目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tpc-c-配置文件" tabindex="-1"><a class="header-anchor" href="#tpc-c-配置文件" aria-hidden="true">#</a> TPC-C 配置文件</h3><p>在使用 benchmarksql 运行 TPC-C 测试的时候，需要指定配置参数，配置包括要连接的数据库类型（Oracle、PG）、IP、端口等。如下代码块说明了具体的配置字段名以及含义：</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>后续的载入数据、预热数据、进行测试都可以采用该配置文件，后续该配置文件的名称都为 <code>PolarDB_PG_Run.conf</code>。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 要连接的数据库类型，下面都以 postgres 为例</span>
<span class="token assign-left variable">db</span><span class="token operator">=</span>postgres
<span class="token comment"># 驱动程序</span>
<span class="token assign-left variable">driver</span><span class="token operator">=</span>org.postgresql.Driver
<span class="token comment"># 连接的 IP 为 localhost， 端口为 5432， 数据库为 tpcc</span>
<span class="token assign-left variable">conn</span><span class="token operator">=</span>jdbc:postgresql://localhost:5432/tpcc
<span class="token comment"># 数据库用户名</span>
<span class="token assign-left variable">user</span><span class="token operator">=</span>postgres
<span class="token comment"># 数据库密码</span>
<span class="token assign-left variable">password</span><span class="token operator">=</span>postgres

<span class="token comment"># 仓库数量，相当于测试数据量</span>
<span class="token assign-left variable">warehouses</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token comment"># 装载数据的进程数量，可根据机器核数动态调整</span>
<span class="token assign-left variable">loadWorkers</span><span class="token operator">=</span><span class="token number">20</span>
<span class="token comment"># 运行测试时的并发客户端数量，一般设置为 CPU 线程总数的 2～6 倍。注意不能超过数据库的最大连接数。 最大连接数可以通过 show max_connections; 查看</span>
<span class="token assign-left variable">terminals</span><span class="token operator">=</span><span class="token number">20</span>

<span class="token comment"># 每个终端运行的事务数，如果该值非 0，则运行总事务数为 runTxnsPerTerminal * terminals。注意，runTxnsPerTerminal 不能和 runMins 同时非 0</span>
<span class="token assign-left variable">runTxnsPerTerminal</span><span class="token operator">=</span><span class="token number">0</span>

<span class="token comment"># 运行时间数，单位为分钟。注意，runTxnsPerTerminal 不能和 runMins 同时非 0</span>
<span class="token assign-left variable">runMins</span><span class="token operator">=</span><span class="token number">1</span>

<span class="token comment"># 每分钟执行的最大事务数，设置为0，则表示不加限制 ( Number of total transactions per minute )</span>
<span class="token assign-left variable">limitTxnsPerMin</span><span class="token operator">=</span><span class="token number">0</span>


<span class="token comment"># 终端和仓库的绑定模式，设置为 true 时说明每个终端有一个固定仓库。 一般采用默认值 true</span>
<span class="token assign-left variable">terminalWarehouseFixed</span><span class="token operator">=</span>true
<span class="token comment"># 是否采用存储过程，为 true 则说明使用</span>
<span class="token assign-left variable">useStoredProcedures</span><span class="token operator">=</span>false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),f={href:"https://cloud.tencent.com/developer/article/1893777",target:"_blank",rel:"noopener noreferrer"},T=l(`<h3 id="载入数据" tabindex="-1"><a class="header-anchor" href="#载入数据" aria-hidden="true">#</a> 载入数据</h3><p>脚本 <code>runDatabaseBuild.sh</code> 用来装载数据。在装载数据前，需要通过 <code>psql</code> 命令 <code>create database tpcc</code> 创建 tpcc 数据库。</p><p>执行如下 bash 命令，执行装载数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./runDatabaseBuild.sh PolarDB_PG_Run.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行成功的结果如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- ----
-- Extra commands to run after the tables are created, loaded,
-- indexes built and extra<span class="token punctuation">\\</span>&#39;s created.
-- PostgreSQL version.
-- ----
vacuum analyze<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预热数据" tabindex="-1"><a class="header-anchor" href="#预热数据" aria-hidden="true">#</a> 预热数据</h3><p>脚本 <code>runBenchmark.sh</code> 用来执行 TPC-C 测试。通常，在正式压测前会进行一次数据预热。</p><p>数据预热的命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./runBenchmark.sh PolarDB_PG_Run.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="可能会出现的错误以及解决方法" tabindex="-1"><a class="header-anchor" href="#可能会出现的错误以及解决方法" aria-hidden="true">#</a> 可能会出现的错误以及解决方法</h4><p>错误日志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ERROR  jTPCC <span class="token builtin class-name">:</span> Term-00, This session ended with errors<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方法：</p><p>该错误说明会话断连，需要通过数据库的日志来定位问题，打印数据库的错误日志命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 文件名需要替换成目录中带 error 的文件名</span>
<span class="token function">cat</span> /home/postgres/tmp_master_dir_polardb_pg_1100_bld/pg_log/postgresql-2022-06-29_101344_error.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进行测试" tabindex="-1"><a class="header-anchor" href="#进行测试" aria-hidden="true">#</a> 进行测试</h3><p>数据预热完，就可以进行正式测试。正式测试的命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./runBenchmark.sh PolarDB_PG_Run.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="结果分析" tabindex="-1"><a class="header-anchor" href="#结果分析" aria-hidden="true">#</a> 结果分析</h3><p>压测结束后，结果如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token number">11</span>:49:15,896 <span class="token punctuation">[</span>Thread-9<span class="token punctuation">]</span> INFO   jTPCC <span class="token builtin class-name">:</span> Term-00, Measured tpmC <span class="token punctuation">(</span>NewOrders<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">71449.03</span>
<span class="token number">11</span>:49:15,896 <span class="token punctuation">[</span>Thread-9<span class="token punctuation">]</span> INFO   jTPCC <span class="token builtin class-name">:</span> Term-00, Measured tpmTOTAL <span class="token operator">=</span> <span class="token number">164116.88</span>
<span class="token number">11</span>:49:15,896 <span class="token punctuation">[</span>Thread-9<span class="token punctuation">]</span> INFO   jTPCC <span class="token builtin class-name">:</span> Term-00, Session Start     <span class="token operator">=</span> <span class="token number">2022</span>-06-29 <span class="token number">11</span>:48:15
<span class="token number">11</span>:49:15,896 <span class="token punctuation">[</span>Thread-9<span class="token punctuation">]</span> INFO   jTPCC <span class="token builtin class-name">:</span> Term-00, Session End       <span class="token operator">=</span> <span class="token number">2022</span>-06-29 <span class="token number">11</span>:49:15
<span class="token number">11</span>:49:15,896 <span class="token punctuation">[</span>Thread-9<span class="token punctuation">]</span> INFO   jTPCC <span class="token builtin class-name">:</span> Term-00, Transaction Count <span class="token operator">=</span> <span class="token number">164187</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Running Average tpmTOTAL / Measured tpmTOTAL：每分钟平均执行事务数（所有事务）</li><li>Memory Usage：客户端内存使用情况</li><li>Measured tpmC (NewOrders) ：每分钟执行的事务数（只统计 NewOrders 事务）</li><li>Transaction Count：执行的交易总数量</li></ul>`,23),P={href:"https://cloud.tencent.com/developer/article/1893777",target:"_blank",rel:"noopener noreferrer"},C=l(`<h2 id="如何在不同场景下测试" tabindex="-1"><a class="header-anchor" href="#如何在不同场景下测试" aria-hidden="true">#</a> 如何在不同场景下测试</h2><p>本文档主要提供了 PolarDB PG 通用的 TPC-C 测试方式，如果需要进行不同场景下的测试，比如：三节点、PFS 文件系统、Ceph 共享存储等。需要通过对应文档创建数据库实例，然后修改数据库的配置。修改配置方式有两个：</p><ol><li><p>可以通过 psql 命令 <code>alter system set ...;</code> 和 <code>select pg_reload_conf();</code> 来修改配置。</p></li><li><p>二是修改数据库配置文件来实现修改配置，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改配置文件</span>
<span class="token function">vim</span> /home/postgres/tmp_master_dir_polardb_pg_1100_bld/postgresql.auto.conf
<span class="token comment"># 重启数据库</span>
/home/postgres/tmp_basedir_polardb_pg_1100_bld/bin/pg_ctl <span class="token parameter variable">-D</span> /home/postgres/tmp_master_dir_polardb_pg_1100_bld restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>后续，再根据该文档进行 TPC-C 测试。</p><hr class="footnotes-sep">`,5),x={class:"footnotes"},A={class:"footnotes-list"},O={id:"fn1",class:"footnote-item"},M={href:"https://blog.csdn.net/Sanayeah/article/details/118721863",target:"_blank",rel:"noopener noreferrer"},E=n("a",{href:"#fnref1",class:"footnote-backref"},"↩︎",-1),q={id:"fn2",class:"footnote-item"},j={href:"https://blog.csdn.net/downing114/article/details/51470743",target:"_blank",rel:"noopener noreferrer"},B=n("a",{href:"#fnref2",class:"footnote-backref"},"↩︎",-1);function H(J,D){const e=i("ExternalLinkIcon"),t=i("RouterLink");return c(),o("div",null,[u,m,v,b,n("p",null,[s("TPC-C 的具体说明和排名可以通过官方网站 "),n("a",h,[s("TPC-C 官网"),a(e)]),s(" 进行查看。")]),k,g,n("p",null,[s("在运行前默认已经通过文档 "),a(t,{to:"/zh/deploying/db-localfs.html"},{default:p(()=>[s("PolarDB 编译部署：单机文件系统")]),_:1}),s(" 部署好 PolarDB PG 的本地实例。")]),_,n("p",null,[s("该配置的部分中文解释说明参考 "),n("a",f,[s("benchmarksql 使用指南"),a(e)]),s("。")]),T,n("p",null,[s("该结果的部分解释参考 "),n("a",P,[s("benchmarksql 使用指南"),a(e)]),s("。")]),C,n("section",x,[n("ol",A,[n("li",O,[n("p",null,[n("a",M,[s("Java 8 安装流程"),a(e)]),s(),E])]),n("li",q,[n("p",null,[n("a",j,[s("Ant 安装流程"),a(e)]),s("。 "),B])])])])])}const R=r(d,[["render",H],["__file","tpcc-test.html.vue"]]);export{R as default};
